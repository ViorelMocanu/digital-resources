---
/**
 * A responsive image component using a single breakpoint
 */
import { Image, getImage } from 'astro:assets';
// <ResponsiveImage image={testImage} alt="Test 1234" width={2560} height={1440} lazyLoading="true" classList={["TestClassName"]} breakpoint="1100" someAttr="someValue" />
export interface Props {
	image: ImageMetadata | string;
	alt: string;
	width: number;
	height: number;
	lazyLoading: boolean;
	classList: Array<string>;
	breakpoint: number;
}

const { image, alt, width, height, lazyLoading = true, classList = ['Picture'], breakpoint = 850, ...attrs } = Astro.props;
const properImage = (typeof image == 'object') ? image : await getImage({src: image, width: width, height: height, alt: alt});

// if ( src.type == 'svg' || src.type == 'undefined' ) return false;

let renderSmallImage = false;
let smallerWidth = properImage.width < width ? properImage.width : width;
let smallerHeight = properImage.width < width ? properImage.height : height;

if (width > breakpoint) {
	renderSmallImage = true;
	smallerWidth = Math.floor(breakpoint / 2);
	smallerHeight = Math.floor((breakpoint * height) / (2 * width));
}

const avifImage = await getImage({
	src: properImage,
	width: width,
	height: height,
	format: 'avif'
});
const avifSmallImage = await getImage({
	src: properImage,
	width: smallerWidth,
	height: smallerHeight,
	format: 'avif'
});

const webpImage = await getImage({
	src: properImage,
	width: width,
	height: height,
	format: 'webp'
});
const webpSmallImage = await getImage({
	src: properImage,
	width: smallerWidth,
	height: smallerHeight,
	format: 'webp'
});

const legacyImage = await getImage({
	src: properImage,
	width: width,
	height: height,
	format: 'png'
});

---

<picture class:list={classList}>
	<source type="image/avif" srcset={avifImage.src} media={`(min-width: ${breakpoint}px)`} />
	<source type="image/webp" srcset={webpImage.src} media={`(min-width: ${breakpoint}px)`} />
	{renderSmallImage && <source type="image/avif" srcset={avifSmallImage.src} media="(min-width: 1px)" /> }
	{renderSmallImage && <source type="image/webp" srcset={webpSmallImage.src} media="(min-width: 1px)" /> }
	<source type="image/png" srcset={legacyImage.src} />
	<Image
		src={properImage}
		alt={alt}
		width={width}
		height={height}
		format="png"
		{...attrs}
	/>
</picture>