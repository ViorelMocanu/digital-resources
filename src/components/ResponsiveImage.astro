---
// A responsive image component using a single breakpoint
/*export interface Props {
	// @TODO: build interface
	section: Object;
}*/
import { Image, getImage } from 'astro:assets';
const { image, alt, width, height, lazyLoading = true, className = "Picture", breakpoint = 850, ...attrs } = Astro.props;
let src;
if ( typeof image == 'object' ) {
	src = image;
} else {
	src = await getImage({src: image, width: width, height: height, alt: alt})
}

// if ( src.type == 'svg' || src.type == 'undefined' ) return false;

let renderSmallImage = false;
let smallerWidth = image.width < width ? image.width : width;
let smallerHeight = image.width < width ? image.height : height;

if (width > breakpoint) {
	renderSmallImage = true;
	smallerWidth = parseInt(breakpoint / 2);
	smallerHeight = parseInt((breakpoint * height) / (2 * width));
}

const avifImage = await getImage({
	src: src,
	width: width,
	height: height,
	format: 'avif'
})
const avifSmallImage = await getImage({
	src: src,
	width: smallerWidth,
	height: smallerHeight,
	format: 'avif'
})

const webpImage = await getImage({
	src: src,
	width: width,
	height: height,
	format: 'webp'
})
const webpSmallImage = await getImage({
	src: src,
	width: smallerWidth,
	height: smallerHeight,
	format: 'webp'
})

const legacyImage = await getImage({
	src: src,
	width: width,
	height: height,
	format: 'png'
})

---

<picture class={className}>
	<source type="image/avif" srcset={avifImage.src} media={`(min-width: ${breakpoint}px)`} />
	<source type="image/webp" srcset={webpImage.src} media={`(min-width: ${breakpoint}px)`} />
	{renderSmallImage && <source type="image/avif" srcset={avifSmallImage.src} media="(min-width: 1px)" /> }
	{renderSmallImage && <source type="image/webp" srcset={webpSmallImage.src} media="(min-width: 1px)" /> }
	<source type="image/png" srcset={legacyImage.src} />
	<Image
		src={src}
		alt={alt}
		width={width}
		height={height}
		format="png"
		{...attrs}
	/>
</picture>