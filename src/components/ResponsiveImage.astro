---
/**
 * Renders a responsive image based on the provided props.
 * @component
 * @example
 * ```astro
 * <ResponsiveImage
 * 	 image={testImage}
 * 	 alt="Test 1234"
 * 	 width={2560}
 * 	 height={1440}
 * 	 lazyLoading={true}
 * 	 classList={["TestClassName","test2"]}
 * 	 breakpoint={1100}
 * />
 * ```
 * @property {ImageMetadata | string} image - The image to be rendered. It can be either an object with image metadata or a string representing the image source.
 * @property {string} alt - The alternative text for the image.
 * @property {number} width - The desired width of the image.
 * @property {number} height - The desired height of the image.
 * @property {boolean} lazyLoading - Flag indicating whether lazy loading should be enabled.
 * @property {Array.<string>} classList - An array of CSS class names to be applied to the image container.
 * @property {number} breakpoint - The breakpoint at which a smaller version of the image should be rendered.
 * @returns {astro.AstroNode} The rendered responsive image.
 */

import { Image, getImage } from 'astro:assets';

export interface Props {
	image: ImageMetadata;
	alt?: string | undefined;
	width: number;
	height: number;
	lazyLoading: boolean;
	classList: Array<string>;
	breakpoint: number;
}

const { image, alt, width, height, lazyLoading = true, classList = ['Picture'], breakpoint = 850, ...attrs } = Astro.props satisfies Props;

let renderSmallImage = false;
let smallerWidth = image.width < width ? image.width : width;
let smallerHeight = image.width < width ? image.height : height;

if (width > breakpoint) {
	renderSmallImage = true;
	smallerWidth = Math.floor(breakpoint / 2);
	smallerHeight = Math.floor((breakpoint * height) / (2 * width));
}

if (image.format == 'svg') {
	renderSmallImage = false;
}

const avifImage = await getImage({
	src: image,
	width: width,
	height: height,
	format: 'avif',
});
const avifSmallImage = await getImage({
	src: image,
	width: smallerWidth,
	height: smallerHeight,
	format: 'avif',
});

const webpImage = await getImage({
	src: image,
	width: width,
	height: height,
	format: 'webp',
});
const webpSmallImage = await getImage({
	src: image,
	width: smallerWidth,
	height: smallerHeight,
	format: 'webp',
});

const legacyImage = await getImage({
	src: image,
	width: width,
	height: height,
	format: 'png',
});
---

{
	image.format != 'svg' ? (
		<picture class:list={classList}>
			<source type="image/avif" srcset={avifImage.src} media={`(min-width: ${breakpoint}px)`} />
			<source type="image/webp" srcset={webpImage.src} media={`(min-width: ${breakpoint}px)`} />
			{renderSmallImage && <source type="image/avif" srcset={avifSmallImage.src} media="(min-width: 1px)" />}
			{renderSmallImage && <source type="image/webp" srcset={webpSmallImage.src} media="(min-width: 1px)" />}
			<source type="image/png" srcset={legacyImage.src} />
			{lazyLoading && <Image src={image} alt={alt} width={width} height={height} format="png" {...attrs} loading="lazy" decoding="async" />}
			{!lazyLoading && <Image src={image} alt={alt} width={width} height={height} format="png" {...attrs} loading="eager" decoding="sync" />}
		</picture>
	) : lazyLoading ? (
		<img src={image.src} width={width} height={height} alt={alt} loading="lazy" decoding="async" class:list={classList} {...attrs} />
	) : (
		<img src={image.src} width={width} height={height} alt={alt} loading="eager" decoding="sync" class:list={classList} {...attrs} />
	)
}
