---
/**
 * Renders the resource list. Is used in multiple locations throughout every resource listing page.
 * @component
 * @example
 * ```astro
 * <ResourceList resources={theResources} page={thePage} pageTitle="The page title" />
 * ```
 * @property {CollectionEntry<"resources">[]} resources - The list of resources.
 * @property {Object} [page] - The optional page object.
 * @property {number} page.currentPage - The current page number.
 * @property {number} page.lastPage - The last page number.
 * @property {Object} page.url - The URL object.
 * @property {string} page.url.[next] - The URL for the next page.
 * @property {string} page.url.[prev] - The URL for the previous page.
 * @returns {astro.AstroNode} The rendered resource list component.
 */

import { type CollectionEntry, getCollection } from 'astro:content';
import { type ExtendedResource, resourceTypeIcon } from '@config';
import HelpfulLinks from '@components/HelpfulLinks.astro';
import Message from '@components/Message.astro';
import Pagination from '@components/Pagination.astro';
import ResourceActionList from '@components/ResourceActionList.astro';
import ResourceLocationList from '@components/ResourceLocationList.astro';
import ResourceTagList from '@components/ResourceTagList.astro';

export interface Props {
	resources: CollectionEntry<'resources'>[];
	page?: {
		currentPage: number;
		lastPage: number;
		url: {
			next?: string;
			prev?: string;
		};
	};
	pageTitle?: string | undefined;
}

const { resources, page, pageTitle } = Astro.props satisfies Props;

let r = resources as unknown as ExtendedResource[];
const allTags = await getCollection('tags');
const allSections = await getCollection('sections');
const allCategories = await getCollection('categories');
const allSubCategories = await getCollection('subcategories');

if (resources) {
	r.forEach((resource: ExtendedResource) => {
		if (resource.data.tags !== null) {
			let tagData: CollectionEntry<'tags'>[] = [];
			resource.data.tags.forEach((tag: { slug: string; collection: string }) => {
				const currentTag = allTags.find((el) => {
					return el.slug == tag.slug;
				});
				if (currentTag && typeof currentTag.data !== 'undefined') {
					tagData.push(currentTag);
					if (currentTag.data.type === 'Tip') {
						resource.type = currentTag.data.title;
					}
				}
			});
			resource['tagData'] = tagData;
		}

		if (resource.data.section !== null) {
			const sectionSlug = resource.data.section.slug;
			allSections.forEach((s: CollectionEntry<'sections'>) => {
				if (s.slug == sectionSlug) resource.sectionData = s;
			});
		}

		if (resource.data.categories !== null && typeof resource.data.categories !== 'undefined' && resource.data.categories.length > 0) {
			let categoryData: CollectionEntry<'categories'>[] = [];
			const currentCategories = resource.data.categories.flatMap((cat: { slug: string; collection: string }) => cat.slug);
			currentCategories.forEach((category: string) => {
				allCategories.forEach((c: CollectionEntry<'categories'>) => {
					if (c && c.slug == category) categoryData.push(c);
				});
			});
			resource['categoryData'] = categoryData;
		}

		if (resource.data.subcategories !== null && typeof resource.data.subcategories !== 'undefined' && resource.data.subcategories.length > 0) {
			let subCategoryData: CollectionEntry<'subcategories'>[] = [];
			const currentSubCategories = resource.data.subcategories.flatMap((subcat: { slug: string; collection: string }) => subcat.slug);
			currentSubCategories.forEach((subcategory: string) => {
				allSubCategories.forEach((s: CollectionEntry<'subcategories'>) => {
					if (s && s.slug == subcategory) subCategoryData.push(s);
				});
			});
			resource['subCategoryData'] = subCategoryData;
		}
	});
}
---

<div class="ResourceContainer">
	{page && <Pagination currentPage={page.currentPage} lastPage={page.lastPage} next={page.url.next} prev={page.url.prev} boxHeader={false} />}

	{
		resources && resources.length > 0 ? (
			<ol class="ResourceList">
				{r.map((resource) => (
					<li class="ResourceItem">
						<div class="ResourceName">
							<h4 class="ResourceTitle" transition:name={`${resource.slug} title`}>
								{resource.slug && (
									<a class="ResourceLink" href={`/r/${resource.slug}`} title={`ViziteazƒÉ resursa intitulatƒÉ: ${resource.data.title}`}>
										{resource.data.title}
										{resourceTypeIcon[resource.type.toLowerCase()]}
									</a>
								)}
								<button class="ResourceStatus" type="button" title="MarcheazƒÉ resursa ca fiind neparcursƒÉ">
									‚úÖ
								</button>
							</h4>
						</div>
						<div class="ResourceAside ResourceInfo">
							<h5 class="WidgetTitle">Informa»õii utile:</h5>
							<ul class="InfoList">
								<li class="InfoItem" transition:name={`${resource.slug} rating`}>
									<div class="InfoItemLabel">
										<span class="Icon IconRating">
											<span class="SROnly">‚≠ê</span>
											<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
												<path
													stroke-linecap="round"
													stroke-linejoin="round"
													d="M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z"
												/>
											</svg>
										</span>
										<span class="InfoItemText">Rating-ul link-ului</span>
									</div>
									<strong class="InfoItemValue">{resource.data.rating || 'n/a'} (10)</strong>
								</li>
								<li class="InfoItem" transition:name={`${resource.slug} views`}>
									<div class="InfoItemLabel">
										<span class="Icon IconViews">
											<span class="SROnly">üëÅÔ∏è</span>
											<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
												<path
													stroke-linecap="round"
													stroke-linejoin="round"
													d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z"
												/>
												<path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
											</svg>
										</span>
										<span class="InfoItemText">VizualizƒÉri</span>
									</div>
									<strong class="InfoItemValue">7895</strong>
								</li>
								{resource.data.requiredTime && (
									<li class="InfoItem" transition:name={`${resource.slug} time`}>
										<div class="InfoItemLabel">
											<span class="Icon IconTime">
												<span class="SROnly">‚è∞</span>
												<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
													<path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" />
												</svg>
											</span>
											<span class="InfoItemText">Timp necesar</span>
										</div>
										<strong class="InfoItemValue">{resource.data.requiredTime}h</strong>
									</li>
								)}
							</ul>
						</div>
						<div class="ResourceMainContent">
							<ResourceLocationList res={resource} />
							{resource.data.description && (
								<p class="ResourceP" transition:name={`${resource.slug} description`}>
									{resource.data.description}
								</p>
							)}
							{resource.data.tags && <ResourceTagList taglist={resource.tagData} resslug={resource.slug} />}
						</div>
						<ResourceActionList res={resource} />
					</li>
				))}
			</ol>
		) : (
			<Message title="Nu s-au gƒÉsit resurse pentru contextul curent" type="error">
				<HelpfulLinks />
			</Message>
		)
	}

	{
		/*
		error && (
			<Message title="Am √Ænt√¢mpinat o problemƒÉ cu baza de date." type="error">
				<HelpfulLinks />
			</Message>
		)
		*/
	}

	{page && <Pagination currentPage={page.currentPage} lastPage={page.lastPage} next={page.url.next} prev={page.url.prev} boxHeader={true} pageTitle={pageTitle} />}
</div>
