---
import { type CollectionEntry, getCollection } from "astro:content";
import { highlightUrl } from "../utils/urlHelpers";

export interface Props {
	section: CollectionEntry<"sections">;
}

const { section } = Astro.props;
const activePage = Astro.url.pathname;

const sectionCategories = section.data.categories;
const allCategories = await getCollection('categories') as CollectionEntry<"categories">[];
const allSubcategories = await getCollection('subcategories') as CollectionEntry<"subcategories">[];
const categoryList = new Array();
if (sectionCategories) {
	sectionCategories.forEach((cat:{slug: string, collection: string}) => {
		const category = allCategories.find((el) => {
			return el.slug == cat.slug;
		});
		if (typeof category !== "undefined" && typeof category.data.subcategories !== "undefined" && category.data.subcategories !== null) {
			category.subCategoryData = new Array();
			category?.data.subcategories.forEach((subcat:{slug: string, collection: string}) => {
				const subcategory = allSubcategories.find((el) => {
					return el.slug == subcat.slug;
				});
				category.subCategoryData.push(subcategory);
			});
		}
		categoryList.push(category);
	});
}

---


<nav class="ListNavigation">
	{!sectionCategories && <h2 class="ListNavTitle">Această secțiune nu are categorii.</h2>}
	{sectionCategories && (
		<h2 class="ListNavTitle" id="treeTitle">Categorii de {section.data.title}:</h2>
		<ol class="ListNav" role="tree" aria-labelledby="treeTitle">
			{categoryList.map((category:CollectionEntry<"categories">) => (
				<li class:list={highlightUrl(`/${section.slug}/${category.slug}`, 'ListNavItem', 'ActiveListNav', activePage)} role="treeitem" aria-selected={activePage.startsWith(`/${section.slug}/${category.slug}`) ? 'true' : 'false'}>
					<a class="ListNavLink" href={`/${section.slug}/${category.slug}`} title={`Vezi resursele din categoria ${category.data.title}`}>{category.data.title}</a>
					{category.data.subcategories && category.subCategoryData && (
						<ol class="ListSubNav">
							{category.subCategoryData.map((subcategory:CollectionEntry<"subcategories">) => (
								<li class:list={highlightUrl(`/${section.slug}/${category.slug}/${subcategory.slug}`, 'ListSubNavItem', 'ActiveListNav', activePage)} role="treeitem" aria-selected={activePage.startsWith(`/${section.slug}/${category.slug}/${subcategory.slug}`) ? 'true' : 'false'}>
									<a class="ListSubNavLink" href={`/${section.slug}/${category.slug}/${subcategory.slug}`} title={`Vezi resursele din subcategoria ${subcategory.data.title}`}>{subcategory.data.title}</a>
								</li>
							))}
							<li class="ListSubNavItem ListSubNavClose">
								<button class="ListSubNavCloseButton" id="closeSubnav" title="Închide meniul de categorii">
									<icon class="Icon IconClose">
										<span class="SROnly">❌</span>
										<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
											<path stroke-linecap="round" stroke-linejoin="round" d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
										</svg>
									</icon>
									<span class="ButtonText">Închide</span>
								</button>
							</li>
						</ol>
					)}
				</li>
			))}
		</ol>
	)}
</nav>