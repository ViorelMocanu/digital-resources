---
/**
 * Renders a navigation menu based on a provided context.
 * @component
 * @example
 * ```astro
 * <ResourceTOC resourceId={resourceId} />
 * <ResourceTOC />
 * ```
 * @property {number} [resourceId] - An object representing the current resource ID.
 * @returns {astro.AstroNode} The rendered navigation menu.
 */

import { Resource, Taxonomy, db, eq } from 'astro:db';
import { highlightUrl } from '../utils/urlHelpers';

const { resourceId } = Astro.props;
const activePage = Astro.url.pathname;

const allSectionsQuery = await db.select().from(Taxonomy).where(eq(Taxonomy.type, 1));
const allCategoriesQuery = await db.select().from(Taxonomy).where(eq(Taxonomy.type, 2));
const allSubcategoriesQuery = await db.select().from(Taxonomy).where(eq(Taxonomy.type, 3));
const allResources = await db.select().from(Resource);

let tocData = allSectionsQuery.map((section) => {
	let resources = allResources.filter((resource) => resource.taxonomy_id === section.id);
	const onlyCategories = allCategoriesQuery.filter((category) => category.parent === section.id);
	const categories = onlyCategories.map((category) => {
		let categoryResources = allResources.filter((resource) => resource.taxonomy_id === category.id);
		resources = resources.concat(categoryResources);
		const onlySubcategories = allSubcategoriesQuery.filter((subcategory) => subcategory.parent === category.id);
		const subcategories = onlySubcategories.map((subcategory) => {
			let subcategoryResources = allResources.filter((resource) => resource.taxonomy_id === subcategory.id);
			categoryResources = categoryResources.concat(subcategoryResources);
			resources = resources.concat(subcategoryResources);
			return {
				...subcategory,
				resources: subcategoryResources,
			};
		});
		return {
			...category,
			resources: categoryResources,
			subcategories,
		};
	});

	return {
		section,
		resources,
		categories,
	};
});
---

{resourceId && `<pre>Resource ID: ${resourceId}</pre>`}

<nav class="ListNavigation" transition:name="ListNavigation">
	{
		tocData &&
			tocData.map((item) => {
				return (
					<details
						class:list={highlightUrl(`/${item.section.slug}`, 'ListNavContainer', 'ActiveListNavContainer', activePage)}
						{...(highlightUrl(`/${item.section.slug}`, 'false', 'true', activePage)[1] === 'true' && {
							'aria-expanded': 'true',
							'open': 'open',
						})}
					>
						<summary class="ListNavSummary">
							<h2 class="ListNavTitle" id="treeTitle">
								{item.section.title} <em>({item.resources.length})</em>
							</h2>
						</summary>
						<div class="ListNavContent">
							<ol class="ListNav">
								{item.categories &&
									item.categories.map((category) => (
										<li class:list={highlightUrl(`/${item.section.slug}/${category.slug}`, 'ListNavItem', 'ActiveListNav', activePage)}>
											<a class="ListNavLink" href={`/${item.section.slug}/${category.slug}`} title={`Vezi resursele din categoria ${category.title}`}>
												{category.title} <em>({category.resources.length})</em>
											</a>
											{category.subcategories && (
												<ol class="ListSubNav">
													{category.subcategories.map((subcategory) => (
														<li
															class:list={highlightUrl(
																`/${item.section.slug}/${category.slug}/${subcategory.slug}`,
																'ListSubNavItem',
																'ActiveListNav',
																activePage
															)}
														>
															<a
																class="ListSubNavLink"
																href={`/${item.section.slug}/${category.slug}/${subcategory.slug}`}
																title={`Vezi resursele din subcategoria ${subcategory.title}`}
															>
																{subcategory.title} <em>({subcategory.resources.length})</em>
															</a>
														</li>
													))}
												</ol>
											)}
										</li>
									))}
							</ol>
						</div>
					</details>
				);
			})
	}
</nav>
