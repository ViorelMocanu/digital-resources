---
/**
 * Renders a list of resource locations based on the provided props.
 * @component

 * This example renders a list of resource locations using the `section`, `categories`, and `subcategories` props.

 * @returns {astro.AstroNode} The rendered list of resource locations.
 */
import { Taxonomy, db } from 'astro:db';
import { type TaxonomyItem, completeSlug } from '@utils/getSortedItems';

const { resource } = Astro.props;

const allTaxonomies = await db.select().from(Taxonomy);
/*
const allSections = allTaxonomies.filter((item) => item.taxonomy_type_id === 1);
const allCategories = allTaxonomies.filter((item) => item.taxonomy_type_id === 2);
const allSubcategories = allTaxonomies.filter((item) => item.taxonomy_type_id === 3);
*/
let taxonomyArray: TaxonomyItem[] = [];
const currentTaxonomy = allTaxonomies.filter((item) => item?.id === resource.taxonomy_id)[0];
taxonomyArray.push(currentTaxonomy as TaxonomyItem);
if (currentTaxonomy?.parent_id) {
	const parentTaxonomy = allTaxonomies.filter((item) => item?.id === currentTaxonomy.parent_id)[0];
	taxonomyArray.unshift(parentTaxonomy as TaxonomyItem);
	if (parentTaxonomy?.parent_id) {
		const grandparentTaxonomy = allTaxonomies.filter((item) => item?.id === parentTaxonomy.parent_id)[0];
		taxonomyArray.unshift(grandparentTaxonomy as TaxonomyItem);
	}
}
---

<ul class="ResourceLocationList" transition:name={`${resource?.slug} location`}>
	<li class="DesktopOnlyBlock">
		<span class="ResourceLocationText">Găsești resursa în:</span>
	</li>
	{
		taxonomyArray.map((item) => (
			<li class="ResourceLocationItem Classification">
				<a class="ClassificationLink" href={`/${completeSlug(item.id, item.slug)}`} title={`Vezi toate resursele din ${item.title}`}>
					{item.menu}
				</a>
			</li>
		))
	}
</ul>
