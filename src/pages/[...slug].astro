---
import { Taxonomy, db, eq } from 'astro:db';
import { DEFAULT_DESCRIPTION, DEFAULT_MENULABEL, DEFAULT_TITLE, DEFAULT_URL, PAGE_SIZE, resourceTypeIcon } from '@config';
import { taxonomiesFlat } from '@utils/getSortedItems';
import CommentList from '@components/CommentList.astro';
import Layout from '@layouts/Layout.astro';
import ResourceFilter from '@components/ResourceFilter.astro';
// import ResourceList from '@components/ResourceList.astro';
import ResourceTOC from '@components/ResourceTOC.astro';

// @TODO: paginate this according to the number of resources on each taxonomy
export async function getStaticPaths() {
	const c = taxonomiesFlat.flatMap(({ lang, slug, props }) => {
		return {
			params: {
				lang,
				slug,
			},
			props: {
				...props,
			},
			pageSize: PAGE_SIZE,
		};
	});

	return c;
}

const { lang, slug } = Astro.params;
const thisPage = Astro.props;

const resources = thisPage.resources;

const formattedDate = thisPage.created_at.toLocaleDateString(lang, {
	year: 'numeric',
	month: 'long',
	day: 'numeric',
});
let updateDate: string;
if (thisPage.modified_at) {
	updateDate = thisPage.modified_at.toLocaleDateString(lang, {
		year: 'numeric',
		month: 'long',
		day: 'numeric',
	});
} else {
	updateDate = '';
}

const pageTemplate = thisPage.taxonomy_type_id === 1 ? 'Section' : thisPage.taxonomy_type_id === 2 ? 'Category' : 'Subcategory';
const pageUrl = (lang === 'en' ? lang + '/' + slug : slug) || DEFAULT_URL;
const pageTitle = (lang === 'en' ? thisPage.title_en : thisPage.title) || DEFAULT_TITLE;
const pageMenu = (lang === 'en' ? thisPage.menu_en : thisPage.menu) || DEFAULT_MENULABEL;
const pageDescription = (lang === 'en' ? thisPage.description_en : thisPage.description) || DEFAULT_DESCRIPTION;

let breadcrumbArray = [
	{
		href: `/${pageUrl}`,
		title: pageTitle,
		label: pageMenu,
	},
];
const categoryQuery = await db
	.select()
	.from(Taxonomy)
	.where(eq(Taxonomy.id, thisPage.parent_id || 0))
	.limit(1);
const category = categoryQuery.map((item) => item)[0];
const sectionQuery = await db
	.select()
	.from(Taxonomy)
	.where(eq(Taxonomy.id, category?.parent_id || 0))
	.limit(1);
const section = sectionQuery.map((item) => item)[0];

let taxonomyId = thisPage.id;
switch (thisPage.taxonomy_type_id) {
	case 1:
		//taxonomyId = section?.id || 0;
		break;
	case 2:
		breadcrumbArray.unshift({
			href: `/${category?.slug}`,
			title: category?.title || DEFAULT_TITLE,
			label: category?.menu || DEFAULT_MENULABEL,
		});
		taxonomyId = category?.id || 0;
		break;
	case 3:
		breadcrumbArray.unshift({
			href: `/${section?.slug}/${category?.slug}`,
			title: category?.title || DEFAULT_TITLE,
			label: category?.menu || DEFAULT_MENULABEL,
		});
		breadcrumbArray.unshift({
			href: `/${section?.slug}`,
			title: section?.title || DEFAULT_TITLE,
			label: section?.menu || DEFAULT_MENULABEL,
		});
		taxonomyId = thisPage.id || 0;
		break;
}
---

<Layout title={pageTitle} description={pageDescription} template={pageTemplate} activeMenu={pageUrl} breadcrumbArray={breadcrumbArray}>
	<div class="Hero" id="hero">
		{
			thisPage.image && (
				<div class="HeroVisual">
					<img class="HeroImage" src={thisPage.image} width="287" height="120" alt={thisPage.image_alt} />
				</div>
			)
		}
		<div class="HeroText">
			<h1 class="HeroTitle">{pageTitle}</h1>
			<details class="HeroDetails">
				<summary class="HeroPreview">
					<p class="HeroP">{pageDescription}</p>
					<p class="HeroP">
						<span class="HeroExpand Link" title={`Afi»ôeazƒÉ √Æntreg textul descriptiv pentru resursele de ${pageTitle}`}>Cite»ôte mai mult &raquo;</span>
					</p>
				</summary>
				<div class="HeroContent">
					<p>Lang: {lang}</p>
					<p>Slug: {slug}</p>
					<p>Parent: {thisPage.parent_id}</p>
					<p>Type: {thisPage.type}</p>
					<p>Sort order: {thisPage.sort_order}</p>
					<p>formattedDate: {formattedDate}</p>
					{updateDate && <p>updateDate: {updateDate}</p>}
					<p>Page: <pre>{JSON.stringify(thisPage,null,4)}</pre></p>
				</div>
			</details>
		</div>
	</div>
	<main class="Main">
		<ResourceFilter tid={taxonomyId} />
		<div class="ResourceContainer">
			<ol class="ResourceList">
				{
					resources.map((item) => (
						<li class="ResourceItem">
							<div class="ResourceName">
								<h4 class="ResourceTitle" transition:name={`${item.slug} title`}>
									{item.slug && (
										<a class="ResourceLink" href={`/r/${item.slug}`} title={`ViziteazƒÉ resursa intitulatƒÉ: ${item.title}`}>
											{item.title}
											{resourceTypeIcon[item.type.toLowerCase()]}
										</a>
									)}
									<button class="ResourceStatus" type="button" title="MarcheazƒÉ resursa ca fiind neparcursƒÉ">
										‚úÖ
									</button>
								</h4>
							</div>
							<div class="ResourceAside ResourceInfo">
								<h5 class="WidgetTitle">Informa»õii utile:</h5>
								<ul class="InfoList">
									<li class="InfoItem" transition:name={`${item.slug} rating`}>
										<div class="InfoItemLabel">
											<span class="Icon IconRating">
												<span class="SROnly">‚≠ê</span>
												<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
													<path
														stroke-linecap="round"
														stroke-linejoin="round"
														d="M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z"
													/>
												</svg>
											</span>
											<span class="InfoItemText">Rating-ul link-ului</span>
										</div>
										<strong class="InfoItemValue">{false || 'n/a'} (10)</strong>
									</li>
									<li class="InfoItem" transition:name={`${item.slug} views`}>
										<div class="InfoItemLabel">
											<span class="Icon IconViews">
												<span class="SROnly">üëÅÔ∏è</span>
												<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
													<path
														stroke-linecap="round"
														stroke-linejoin="round"
														d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z"
													/>
													<path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
												</svg>
											</span>
											<span class="InfoItemText">VizualizƒÉri</span>
										</div>
										<strong class="InfoItemValue">7895</strong>
									</li>
									{item.required_time && (
										<li class="InfoItem" transition:name={`${item.slug} time`}>
											<div class="InfoItemLabel">
												<span class="Icon IconTime">
													<span class="SROnly">‚è∞</span>
													<svg
														xmlns="http://www.w3.org/2000/svg"
														fill="none"
														viewBox="0 0 24 24"
														stroke-width="1.5"
														stroke="currentColor"
														class="w-6 h-6"
													>
														<path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" />
													</svg>
												</span>
												<span class="InfoItemText">Timp necesar</span>
											</div>
											<strong class="InfoItemValue">{item.required_time}h</strong>
										</li>
									)}
								</ul>
							</div>
							<div class="ResourceMain">
								{/*
									<ResourceLocationList res={item} />
								*/}
								<div class="ResourceMainContent">
									{item.description && (
										<p class="ResourceP" transition:name={`${item.slug} description`}>
											{item.description}
											<pre>{JSON.stringify(item, null, 4)}</pre>
										</p>
									)}
								</div>
								{/*item.tags && <ResourceTagList taglist={item.tagData} resslug={item.slug} />*/}
							</div>
							{/*
								<ResourceActionList res={resource} />
							*/}
						</li>
					))
				}
			</ol>
		</div>
		<ResourceTOC />
		{
			/*
	<ResourceFilter section={section} />
	<ResourceList resources={thisPage.data} page={thisPage} pageTitle={pageTitle} />
	<ResourceTOC section={section} />
		*/
		}
		<CommentList />
	</main>
</Layout>
