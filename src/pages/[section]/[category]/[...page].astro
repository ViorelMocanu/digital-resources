---
import { type CollectionEntry, getCollection, getEntry } from 'astro:content';
import Layout from '../../../layouts/Layout.astro';
import { PAGE_SIZE } from '../../../config';
import ResourceFilter from '../../../components/ResourceFilter.astro';
import ResourceList from '../../../components/ResourceList.astro';
import ResourceTOC from '../../../components/ResourceTOC.astro';

export async function getStaticPaths({ paginate }: any) {
	const allSections = (await getCollection('sections')).sort((a, b) => a.data.sortOrder - b.data.sortOrder);
	const allSectionsArray = allSections.flatMap((section: CollectionEntry<'sections'>) => section.slug);
	const allCategories = (await getCollection('categories')).sort((a, b) => a.data.sortOrder - b.data.sortOrder);
	const allCategoriesArray = allCategories.flatMap((category: CollectionEntry<'categories'>) => category.slug);
	const allResources = (await getCollection('resources')).sort((a, b) => new Date(a.data.modDate as string).valueOf() - new Date(b.data.modDate as string).valueOf());

	let finalPagination = new Array();
	allSectionsArray.forEach((section) => {
		const currentSection = allSections.find((sec: CollectionEntry<'sections'>) => sec.slug == section);
		if (currentSection == null || currentSection.data.categories == null) {
			// nu se poate sa nu existe o sectiune definita
			// eslint-disable-next-line no-console
			// console.warn('false', 'currentSection', currentSection?.id);
		} else {
			// există secțiunea
			// căutăm categorii atașate secțiunii
			const sectionCategories = currentSection.data.categories.flatMap((cat: { slug: string; collection: string }) => cat.slug);
			const selectedCategories = allCategoriesArray.filter((cat: string) => {
				return sectionCategories.includes(cat);
			});
			if (selectedCategories.length < 1) {
				// secțiunea nu are categorii
				// caz tratat în `/src/pages/[sections]/[...page].astro`
				// eslint-disable-next-line no-console
				// console.warn('false', 'selectedCategories', selectedCategories);
			} else {
				// există cel puțin o categorie pe care o putem adăuga în lista paginilor
				selectedCategories.forEach((category) => {
					const selectedResources = allResources.filter((res: CollectionEntry<'resources'>) => {
						if (res.data.categories) {
							const resourceCategories = res.data.categories.flatMap((cat: { slug: string; collection: string }) => cat.slug);
							return res.data.section.slug == section && resourceCategories.includes(category);
						} else {
							return false;
						}
					});
					if (selectedResources.length < 1) {
						// nu avem resurse atașate categoriei în general
						// eslint-disable-next-line no-console
						// console.warn('false', 'selectedResources', selectedResources);
						finalPagination.push({
							params: {
								section: section,
								category: category,
								subcategory: undefined,
								page: undefined,
							},
							props: {
								page: {
									data: [],
									start: 0,
									end: -1,
									size: 1,
									total: 0,
									currentPage: 1,
									lastPage: 1,
									url: {
										current: `/${section}/${category}`,
									},
								},
							},
						});
					} else {
						// am găsit resurse atașate categoriei și paginăm ca atare
						const p = paginate(selectedResources, {
							params: {
								section: section,
								category: category,
								subcategory: undefined,
							},
							pageSize: PAGE_SIZE,
						});
						finalPagination.push(...p);
					}
				});
			}
		}
	});

	// For every tag, return a paginate() result.
	// Make sure that you pass `{params: {tag}}` to `paginate()`
	// so that Astro knows which tag grouping the result is for.
	return finalPagination;
}

const { page } = Astro.props;
const params = Astro.params;

const currentSection = params.section;
const section = await getEntry('sections', currentSection);
const currentCategory = params.category;
const category = await getEntry('categories', currentCategory);
const { Content } = await category.render();

const pageTitle = category.data.title;
const pageDescription = category.data.description;
const breadcrumbArray = [
	{
		href: `/${section.slug}`,
		title: section.data.title,
		label: section.data.menu,
	},
	{
		href: `/${section.slug}/${category.slug}`,
		title: category.data.title,
		label: category.data.menu,
	},
];
---

<Layout title={pageTitle} description={pageDescription} template="CategoryPage" activeMenu={section.slug} breadcrumbArray={breadcrumbArray}>
	<div class="Hero" id="hero">
		{
			category.data.image && (
				<div class="HeroVisual">
					<img class="HeroImage" src={category.data.image?.imageUrl} width="287" height="120" alt={category.data.image?.imageAlt} />
				</div>
			)
		}
		<div class="HeroText">
			<h1 class="HeroTitle">{category.data.title}</h1>
			<details class="HeroDetails">
				<summary class="HeroPreview">
					<p class="HeroP">{category.data.description}</p>
					<p class="HeroP">
						<span class="HeroExpand Link" title={`Afișează întreg textul descriptiv pentru resursele de ${category.data.title}`}>Citește mai mult &raquo;</span>
					</p>
				</summary>
				<div class="HeroContent">
					<Content />
				</div>
			</details>
		</div>
	</div>
	<main class="Main">
		<ResourceFilter section={section} />
		<ResourceList resources={page.data} page={page} pageTitle={category.data.title} />
		<ResourceTOC section={section} />
	</main>
</Layout>
