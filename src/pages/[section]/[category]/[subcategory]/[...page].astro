---
import { type CollectionEntry, getCollection, getEntry } from 'astro:content';
import Layout from '../../../../layouts/Layout.astro';
import { PAGE_SIZE } from '../../../../config';
import ResourceFilter from '../../../../components/ResourceFilter.astro';
import ResourceList from '../../../../components/ResourceList.astro';
import ResourceTOC from '../../../../components/ResourceTOC.astro';

export async function getStaticPaths ({ paginate }: any) {

	const allSections = (await getCollection('sections')).sort((a, b) => a.data.sortOrder - b.data.sortOrder);
	const allSectionsArray = allSections.flatMap((section:{slug: string, collection: string}) => (section.slug));
	const allCategories = (await getCollection('categories')).sort((a, b) => a.data.sortOrder - b.data.sortOrder);
	const allCategoriesArray = allCategories.flatMap((category:{slug: string, collection: string}) => (category.slug));
	const allSubCategories = (await getCollection('subcategories')).sort((a, b) => a.data.sortOrder - b.data.sortOrder);
	const allSubCategoriesArray = allSubCategories.flatMap((subcategory:{slug: string, collection: string}) => (subcategory.slug));
	const allResources = (await getCollection('resources')).sort((a, b) => ((new Date(a.data.modDate as string).valueOf()) - (new Date(b.data.modDate as string).valueOf())));

	let finalPagination = new Array();
	allSectionsArray.forEach((section) => {
		const currentSection = allSections.find((sec:CollectionEntry<"sections">) => (sec.slug == section));
		if (currentSection == null || currentSection.data.categories == null) {
			// nu se poate sa nu existe o sectiune definita
			// eslint-disable-next-line no-console
			// console.warn('false', 'currentSection', currentSection?.id);
		} else {
			// există secțiunea
			// căutăm categorii atașate secțiunii
			const sectionCategories = currentSection.data.categories.flatMap((cat:{slug: string, collection: string}) => (cat.slug));
			const selectedCategories = allCategoriesArray.filter((cat:string) => (sectionCategories.includes(cat)));
			if (selectedCategories.length < 1) {
				// secțiunea nu are categorii
				// caz tratat în `/src/pages/[sections]/[...page].astro`
				// eslint-disable-next-line no-console
				// console.warn('false', 'selectedCategories', selectedCategories);
			} else {
				// există cel puțin o categorie pe care o putem adăuga în lista paginilor
				selectedCategories.forEach((category) => {
					// căutăm subcategorii atașate categoriei
					const currentCategory = allCategories.find((cat:CollectionEntry<"categories">) => (cat.slug == category));
					if (!currentCategory || currentCategory.data.subcategories == null) {
						// nu avem subcategorii în categoria curentă
						// eslint-disable-next-line no-console
						// console.warn('false', 'currentCategory', currentCategory?.id);
					} else {
						// există cel puțin o subcategorie pe care o putem adăuga în lista paginilor
						const sectionSubCategories = currentCategory.data.subcategories.flatMap((subcat:{slug: string, collection: string}) => (subcat.slug));
						const selectedSubCategories = allSubCategoriesArray.filter((subcat:string) => (sectionSubCategories.includes(subcat)));
						if (selectedSubCategories.length < 1) {
							// categoria nu are subcategorii
							// caz tratat în `/src/pages/[sections]/[categories]/[...page].astro`
							// eslint-disable-next-line no-console
							// console.warn('false', 'selectedSubCategories', selectedSubCategories);
						} else {
							// există cel puțin o subcategorie pe care o putem adăuga în lista paginilor
							selectedSubCategories.forEach((subcategory) => {
								const selectedResources = allResources.filter((res:CollectionEntry<"resources">) => {
									if (!res.data.categories) return false;
									const resourceCategories = res.data.categories.flatMap((cat:{slug: string, collection: string}) => cat.slug);
									if (!res.data.subcategories) return false;
									const resourceSubCategories = res.data.subcategories.flatMap((subcat:{slug: string, collection: string}) => subcat.slug);
									return res.data.section.slug == section && resourceCategories.includes(category) && resourceSubCategories.includes(subcategory);
								});
								if (selectedResources.length < 1) {
									// nu avem resurse atașate categoriei în general
									// eslint-disable-next-line no-console
									// console.warn('false', 'selectedResources', selectedResources);
									finalPagination.push({
										params: {
											section: section,
											category: category,
											subcategory: subcategory,
											page: undefined
										},
										props: { page: {
											data: [],
											start: 0,
											end: -1,
											size: 1,
											total: 0,
											currentPage: 1,
											lastPage: 1,
											url: {
												current: `/${section}/${category}/${subcategory}`
											}
										}}
									});
								} else {
									// am găsit resurse atașate categoriei și paginăm ca atare
									const p = paginate(selectedResources, {
										params: {
											section: section,
											category: category,
											subcategory: subcategory
										},
										pageSize: PAGE_SIZE,
									});
									finalPagination.push(...p);
								}
							});
						}
					}
				});
			}
		}
	});

	// For every tag, return a paginate() result.
	// Make sure that you pass `{params: {tag}}` to `paginate()`
	// so that Astro knows which tag grouping the result is for.
	return finalPagination;
}

const { page } = Astro.props;
const params = Astro.params;

const currentSection = params.section as string;
const section = await getEntry("sections", currentSection) as CollectionEntry<"sections">;
const currentCategory = params.category as string;
const category = await getEntry("categories", currentCategory) as CollectionEntry<"categories">;
const currentSubCategory = params.subcategory as string;
const subcategory = await getEntry("subcategories", currentSubCategory) as CollectionEntry<"subcategories">;
const { Content } = await category.render();

const breadcrumbArray = [{
	href: `/${section.slug}`,
	title: section.data.title,
	label: section.data.menu
}, {
	href: `/${section.slug}/${category.slug}`,
	title: category.data.title,
	label: category.data.menu
}, {
	href: `/${section.slug}/${category.slug}/${subcategory.slug}`,
	title: subcategory.data.title,
	label: subcategory.data.menu
}];

---
<Layout
	title={subcategory.data.title}
	description={subcategory.data.description}
	template="SubcategoryPage"
	activeMenu={section.slug}
	breadcrumbArray={breadcrumbArray}
>
	<div class="Hero" id="hero">
		{subcategory.data.image && (
			<div class="HeroVisual">
				<img class="HeroImage" src={subcategory.data.image?.imageUrl} width="287" height="120" alt={subcategory.data.image?.imageAlt} />
			</div>
		)}
		<div class="HeroText">
			<h1 class="HeroTitle">{subcategory.data.title}</h1>
			<details class="HeroDetails">
				<summary class="HeroPreview">
					<p class="HeroP">{subcategory.data.description}</p>
					<p class="HeroP"><span class="HeroExpand Link" title={`Afișează întreg textul descriptiv pentru resursele de ${subcategory.data.title}`}>Citește mai mult &raquo;</span></p>
				</summary>
				<div class="HeroContent">
					<Content />
				</div>
			</details>
		</div>
	</div>
	<main class="Main">
		<ResourceFilter />
		<ResourceList resources={page.data} page={page} />
		<ResourceTOC section={section} />
	</main>
</Layout>