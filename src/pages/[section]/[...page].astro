---
import type { InferGetStaticParamsType, InferGetStaticPropsType } from 'astro';
import Layout from '@layouts/Layout.astro';
import { PAGE_SIZE } from '@config';
import ResourceFilter from '@components/ResourceFilter.astro';
import ResourceList from '@components/ResourceList.astro';
import ResourceTOC from '@components/ResourceTOC.astro';
// import ResponsiveImage from '@components/ResponsiveImage.astro';
import { allResources, allSections, taxonomyTree } from '@lib/supabase';
// import { searchTaxonomyTree } from '@utils/getTaxonomies';

export async function getStaticPaths({ paginate }: any) {
	const sections = allSections;
	// console.log('taxonomyTree', taxonomyTree, taxonomyTree[0].categories);
	const resources = allResources?.filter((resource) => {
		return true;
		//return searchTaxonomyTree(taxonomyTree, resource.taxonomy);
	});
	return sections?.flatMap((section) => {
		return paginate(resources, {
			params: { section: section.slug, category: undefined, subcategory: undefined },
			pageSize: PAGE_SIZE,
		});
	});
}
export type Params = InferGetStaticParamsType<typeof getStaticPaths>;
export type Props = InferGetStaticPropsType<typeof getStaticPaths>;
const { page } = Astro.props satisfies Props;
const params = Astro.params satisfies Params;

// console.log('PAGE DATE', page.data);

const currentSection = params.section as string;
const section = allSections?.find((section) => section.slug === currentSection);
const categories = taxonomyTree?.find((section) => section.slug === currentSection)?.categories;

const pageTitle = section?.title;
const pageDescription = section?.description;
const breadcrumbArray = [
	{
		href: `/${section?.slug}`,
		title: section?.title,
		label: section?.menu,
	},
];
---

<Layout title={pageTitle} description={pageDescription} template="SectionPage" activeMenu={section?.slug} breadcrumbArray={breadcrumbArray}>
	<div class="Hero" id="hero">
		{/*
			section?.image && (
				<div class="HeroVisual">
					@TODO breakpoint must be edited here
					<ResponsiveImage
						breakpoint={1100}
						classList={['HeroImage']}
						image={section?.image}
						width={287}
						height={120}
						alt={section?.image_alt || 'Without alt'}
						lazyLoading={false}
					/>
				</div>
			)
		*/}
		<div class="HeroText">
			<h1 class="HeroTitle">{section?.title}</h1>
			<div class="HeroContent">
				{pageDescription}
			</div>
		</div>
	</div>
	<main class="Main">
		<ResourceFilter section={section} categories={categories} />
		<ResourceList resources={page.data} page={page} pageTitle={section?.title} />
		<ResourceTOC section={section} categories={categories} />
	</main>
</Layout>
