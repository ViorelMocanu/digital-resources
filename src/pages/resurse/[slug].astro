---
import { type CollectionEntry, getCollection, getEntries, getEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

// 1. Generate a new path for every collection entry
export async function getStaticPaths () {
	const blogEntries = await getCollection('resources');
	return blogEntries.map(entry => ({
		params: { slug: entry.slug }, props: { entry },
	}));
}

// 2. For your template, you can get the entry directly from the prop
const { entry } = Astro.props;
const { Content } = await entry.render();

let resourceTags = new Array();
if (entry.data.tags) {
	const allTags = await getCollection('tags');
	entry.data.tags.map((tag:CollectionEntry<"tags">) => {
		const currentTag = allTags.find((t) => t.slug == tag.slug);
		resourceTags.push({title: currentTag?.data.title, slug: tag.slug, type: currentTag?.data.type});
	});
}

const sectionSlug = entry.data.section.slug;
const section = await getEntry("sections", sectionSlug) as CollectionEntry<"sections">;
const resourceCategories = await getEntries(entry.data.categories) as CollectionEntry<"categories">[];
let resourceSubCategories = new Array();
if (entry.data.subcategories) {
	resourceSubCategories = await getEntries(entry.data.subcategories) as CollectionEntry<"resources">[];
}
---

<Layout title={entry.title} description={entry.data.description} modDate={entry.modDate} addDate={entry.addDate} template="ResourcePage" activeMenu={sectionSlug}>
	<div class="Hero" id="hero">
		<div class="HeroVisual">
			<img class="HeroImage" src={entry.data.image.imageUrl} width="287" height="120" alt={entry.data.image.alt} />
		</div>
		<div class="HeroText">
			<h1 class="HeroTitle">{entry.data.title}</h1>
			<p>Url: {entry.data.url}</p>
			<p>language: {entry.data.language}</p>
			<p>modDate: {entry.data.modDate}</p>
			<p>addDate: {entry.data.addDate}</p>
			<p>section: <a href={`/${section.slug}`} title={`Vezi toate resursele din secțiunea ${section.data.title}`}>{section.data.menu}</a></p>
			{resourceCategories && (
				<p>categories: {resourceCategories.map((category) => (
					<a href={`/${section.slug}/${category.slug}`} title={`Vezi toate resursele din categoria ${category.data.title}`}>{category.data.title}</a>
				))}</p>
			)}
			{resourceSubCategories.length > 0 && (
				<p>
					subcategories: {resourceCategories.map((category) => (resourceSubCategories.map((subcategory) => (
						<a href={`/${section.slug}/${category.slug}/${subcategory.slug}`} title={`Vezi toate resursele din subcategoria ${subcategory.data.title}`}>{subcategory.data.title}</a>
					))))}
					<h1>@TODO: this seems wrong</h1>
				</p>
			)}
			<p>Autor: <a href={entry.data.authorUrl} title="Vizitează site-ul autorului">{entry.authorName}</a></p>
			<p>rating: {entry.data.rating}</p>
			<p>price: {entry.data.price}</p>
			<p>requiredTime: {entry.data.requiredTime}</p>
			<p>type: {entry.data.type}</p>
			<p>mandatory: {entry.data.mandatory}</p>
			<p>description: {entry.data.description}</p>
			{entry.data.tags && 
				<ul class="ResourceTags">
					{resourceTags.map((tag) => (
						<li class="ResourceTag">
							<a class:list={[`ResourceTagLink`,`${tag.type}-${tag.slug}`]} href={`/taguri/${tag.slug}`} title={`Vezi toate resursele care sunt clasificate astfel: ${tag.title}`}>
								<span class="Icon IconTag">Tag:</span>
								<span class="TagName">{tag.title}</span>
							</a>
						</li>
					))}
				</ul>
			}
		</div>
	</div>
	<main class="Main">
		<Content />
	</main>
</Layout>
