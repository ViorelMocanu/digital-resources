---
import Layout from "../../layouts/Layout.astro";
import ResourceFilter from "../../components/ResourceFilter.astro";
import ResourceList from "../../components/ResourceList.astro";
import ResourceTOC from "../../components/ResourceTOC.astro";
import CommentList from "../../components/CommentList.astro";
import { getCollection } from "astro:content";

// @TODO: fix this
// v1: https://docs.astro.build/en/core-concepts/routing/#nested-pagination
// v2: 

/*
export async function getStaticPaths({ paginate }: any) {
	const allSections = (await getCollection('sections')).sort((a, b) => a.data.sortOrder - b.data.sortOrder);
	const allResources = (
		await getCollection("resources")
	).sort((a, b) => new Date(a.data.pubDate).valueOf() - new Date(b.data.pubDate).valueOf()); // ordering by publication date
	return allSections.flatMap((sx: any) => {
		const s = sx.slug;
		const filteredResources = allResources.filter((resource: any) => ( resource.data.section.slug === s ));
		console.log('SECTION = ',sx, s, filteredResources);
		return paginate(filteredResources, {
			params: { s },
			pageSize: 1
		});
	});
}
*/

export async function getStaticPaths({ paginate }: any) {
	const allSections = (await getCollection('sections')).sort((a, b) => a.data.sortOrder - b.data.sortOrder);
	const allResources = (await getCollection("resources")).sort((a, b) => new Date(a.data.pubDate).valueOf() - new Date(b.data.pubDate).valueOf());
	return allSections.flatMap((currentSection: any) => {
		const s = currentSection.slug;
		//const filteredResources = allResources.filter((resource: any) => ( resource.data.section.slug === s ));
		return paginate(allResources, {
			params: { s },
			pageSize: 1
		});
	});
}

console.log(Astro.params, Astro.props);

const { page } = Astro.props;
const params = Astro.params;
/*const currentSection = Astro.url.pathname.split("/")[1];
const section = await getEntry("sections", currentSection);
const { Content } = await section.render();*/
---
{JSON.stringify(page)}
{JSON.stringify(params)}
<!--Layout title="Resurse de Front End Development - Resurse.dev" description="@TODO: scrie descrierea" template="SectionPage">
	<div class="Hero" id="hero">
		<div class="HeroVisual">
			<img class="HeroImage" src={section.data.image?.imageUrl} width="287" height="120" alt={section.data.image?.imageAlt} />
		</div>
		<div class="HeroText">
			<h1 class="HeroTitle">{section.data.title}</h1>
			<details class="HeroDetails">
				<summary class="HeroPreview">
					<p class="HeroP">{section.data.shortDescription}</p>
					<p class="HeroP"><span class="HeroExpand Link" title=`Afișează întreg textul descriptiv pentru resursele de ${section.data.menu}`>Citește mai mult &raquo;</span></p>
				</summary>
				<div class="HeroContent">
					<Content />
				</div>
			</details>
		</div>
	</div>
	<main class="Main">
		<ResourceFilter />
		<ResourceList resources={page.data} page={page} />
		<ResourceTOC section={section} />
		<CommentList />
	</main>
</!--Layout-->